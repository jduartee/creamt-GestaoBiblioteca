// <auto-generated />
using System;
using BibliotecaNet.Repository.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BibliotecaNet.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210224131602_AddIsbnAcervo")]
    partial class AddIsbnAcervo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.Acervo", b =>
                {
                    b.Property<int>("AcervoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcervoAutorId")
                        .HasColumnType("int");

                    b.Property<int?>("AcervoCategoriaId")
                        .HasColumnType("int");

                    b.Property<int?>("AcervoEditoraId")
                        .HasColumnType("int");

                    b.Property<int?>("AcervoSituacaoId")
                        .HasColumnType("int");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<string>("Edicao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcervoId");

                    b.HasIndex("AcervoAutorId");

                    b.HasIndex("AcervoCategoriaId");

                    b.HasIndex("AcervoEditoraId");

                    b.HasIndex("AcervoSituacaoId");

                    b.ToTable("Acervos");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.AcervoAutor", b =>
                {
                    b.Property<int>("AcervoAutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PessoaId")
                        .HasColumnType("int");

                    b.HasKey("AcervoAutorId");

                    b.HasIndex("PessoaId");

                    b.ToTable("AcervoAutors");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.AcervoCategoria", b =>
                {
                    b.Property<int>("AcervoCategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcervoCategoriaId");

                    b.ToTable("AcervoCategorias");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.AcervoEditora", b =>
                {
                    b.Property<int>("AcervoEditoraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcervoEditoraId");

                    b.ToTable("AcervoEditoras");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.AcervoMovimentacao", b =>
                {
                    b.Property<int>("AcervoMovimentacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcervoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataDevolucao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEmprestimo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataPrazoDevolucao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PessoaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("AcervoMovimentacaoId");

                    b.HasIndex("AcervoId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AcervoMovimentacaos");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.AcervoSituacao", b =>
                {
                    b.Property<int>("AcervoSituacaoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcervoSituacaoId");

                    b.ToTable("AcervoSituacaos");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.Pessoa", b =>
                {
                    b.Property<int>("PessoaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PessoaTipoId")
                        .HasColumnType("int");

                    b.HasKey("PessoaId");

                    b.HasIndex("PessoaTipoId");

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.PessoaContato", b =>
                {
                    b.Property<int>("PessoaContatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PessoaContatoTipoId")
                        .HasColumnType("int");

                    b.Property<int?>("PessoaId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PessoaContatoId");

                    b.HasIndex("PessoaContatoTipoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("PessoaContatos");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.PessoaContatoTipo", b =>
                {
                    b.Property<int>("PessoaContatoTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mascara")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obrigatorio")
                        .HasColumnType("bit");

                    b.HasKey("PessoaContatoTipoId");

                    b.ToTable("PessoaContatoTipos");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.PessoaDocumento", b =>
                {
                    b.Property<int>("PessoaDocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PessoaDocumentoTipoId")
                        .HasColumnType("int");

                    b.Property<int?>("PessoaId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PessoaDocumentoId");

                    b.HasIndex("PessoaDocumentoTipoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("PessoaDocumentos");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.PessoaDocumentoTipo", b =>
                {
                    b.Property<int>("PessoaDocumentoTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mascara")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obrigatorio")
                        .HasColumnType("bit");

                    b.HasKey("PessoaDocumentoTipoId");

                    b.ToTable("PessoaDocumentoTipos");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.PessoaEndereco", b =>
                {
                    b.Property<int>("PessoaEnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PessoaId")
                        .HasColumnType("int");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.HasKey("PessoaEnderecoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("PessoaEnderecos");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.PessoaTipo", b =>
                {
                    b.Property<int>("PessoaTipoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PessoaTipoId");

                    b.ToTable("PessoaTipo");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PessoaId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PessoaId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.Acervo", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.AcervoAutor", "AcervoAutor")
                        .WithMany()
                        .HasForeignKey("AcervoAutorId");

                    b.HasOne("BibliotecaNet.Domain.Entity.AcervoCategoria", "AcervoCategoria")
                        .WithMany()
                        .HasForeignKey("AcervoCategoriaId");

                    b.HasOne("BibliotecaNet.Domain.Entity.AcervoEditora", "AcervoEditora")
                        .WithMany()
                        .HasForeignKey("AcervoEditoraId");

                    b.HasOne("BibliotecaNet.Domain.Entity.AcervoSituacao", "AcervoSituacao")
                        .WithMany()
                        .HasForeignKey("AcervoSituacaoId");

                    b.Navigation("AcervoAutor");

                    b.Navigation("AcervoCategoria");

                    b.Navigation("AcervoEditora");

                    b.Navigation("AcervoSituacao");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.AcervoAutor", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.AcervoMovimentacao", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.Acervo", "Acervo")
                        .WithMany()
                        .HasForeignKey("AcervoId");

                    b.HasOne("BibliotecaNet.Domain.Entity.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");

                    b.HasOne("BibliotecaNet.Domain.Entity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Acervo");

                    b.Navigation("Pessoa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.Pessoa", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.PessoaTipo", "PessoaTipo")
                        .WithMany()
                        .HasForeignKey("PessoaTipoId");

                    b.Navigation("PessoaTipo");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.PessoaContato", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.PessoaContatoTipo", "pessoaContatoTipo")
                        .WithMany()
                        .HasForeignKey("PessoaContatoTipoId");

                    b.HasOne("BibliotecaNet.Domain.Entity.Pessoa", "Pessoa")
                        .WithMany("PessoaContatos")
                        .HasForeignKey("PessoaId");

                    b.Navigation("Pessoa");

                    b.Navigation("pessoaContatoTipo");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.PessoaDocumento", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.PessoaDocumentoTipo", "PessoaDocumentoTipo")
                        .WithMany()
                        .HasForeignKey("PessoaDocumentoTipoId");

                    b.HasOne("BibliotecaNet.Domain.Entity.Pessoa", "Pessoa")
                        .WithMany("PessoaDocumentos")
                        .HasForeignKey("PessoaId");

                    b.Navigation("Pessoa");

                    b.Navigation("PessoaDocumentoTipo");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.PessoaEndereco", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.Pessoa", "Pessoa")
                        .WithMany("PessoaEnderecos")
                        .HasForeignKey("PessoaId");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.Usuario", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaNet.Domain.Entity.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BibliotecaNet.Domain.Entity.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaNet.Domain.Entity.Pessoa", b =>
                {
                    b.Navigation("PessoaContatos");

                    b.Navigation("PessoaDocumentos");

                    b.Navigation("PessoaEnderecos");
                });
#pragma warning restore 612, 618
        }
    }
}
